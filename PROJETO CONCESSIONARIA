//login funcionario:Username:funcionario e senha:1234
//login cliente:Username:cliente e senha:4321
//Para abrir os arquivos .txt, é necessário primeiro criar uma pasta e executar o código dentro dela.
//Após a execução, os arquivos gerados serão automaticamente salvos na mesma pasta onde o código está sendo executado.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>

#define max_cli 100  // Max de clientes
#define max_carros 5  // Max de carros
#define max_usuarios 2  // Max de usuarios

// funcao que exibe o menu para o funcionario
void menu_funcionario() {
    printf("\nBem-vindo, funcionário!\n");
    printf("1. Cadastrar cliente\n");
    printf("2. Venda\n");
    printf("3. Sair\n");
}

// funcao que exibe o menu para o cliente
void menu_cliente() {
    printf("\nBem-vindo, Clientes!\n");
    printf("1. Ver Carros\n");
    printf("2. Opções de financiamento\n");
    printf("3. Sair\n");
}

int main() {
    setlocale(LC_ALL, "");  // caracteres especiais - pt br

    // variaveis p armazenar dados dos clientes
    char nome_clientes[max_cli][50];  // nome dos clientes
    char telefone_clientes[max_cli][20];  // tel dos clientes
    int numero_clientes = 0;  // contador de clientes cadastrados

    // carros disponíveis
    char carros[max_carros][50] = {
        "Fiat Palio ELX Fire 1.0 2006",
        "Renault Kwid Zen 1.0 2024",
        "Fiat Argo 1.0 2024",
        "Chevrolet Celta MPFI 1.0 2012",
        "Hyundai HB20 Sense Plus 1.0 2023"
    };

    // preco dos carros
    float preco_carros[max_carros] = {
        16700,
        74590,
        85990,
        22100,
        88990
    };

    // lista de usuarios cadastrados (funcionário e cliente)
    char usuarios[max_usuarios][2][20] = {
        {"funcionario", "1234"},
        {"cliente", "4321"}
    };
    char usuario[50], senha[50];  // variaveis para login

    int login_sucesso = 0, tipo_usuario = -1;  // flags para login e tipo de usuário
    int sair_sistema = 0;  // flag para sair do sistema

    while (!sair_sistema) {  // loop principal do sistema
        login_sucesso = 0;
        tipo_usuario = -1;
        printf("=== Sistema de Login ===\n");

        // loop de login até que seja ok
        while (!login_sucesso) {
            printf("Digite o usuário: ");
            scanf("%s", usuario);
            printf("Digite a senha: ");
            scanf("%s", senha);

            // verificacao das credenciais de login
            for (int i = 0; i < max_usuarios; i++) {
                if (strcmp(usuarios[i][0], usuario) == 0 && strcmp(usuarios[i][1], senha) == 0) {
                    login_sucesso = 1;
                    tipo_usuario = i;
                    break;
                }
            }

            if (!login_sucesso) {
                printf("Login inválido! Tente novamente.\n");
            }
        }

        // menu p o funcionario
        if (tipo_usuario == 0) {
            int opcao;
            do {
                menu_funcionario();  // exibe o menu do funcionário
                printf("\nEscolha uma opção: ");
                scanf("%d", &opcao);

                if (opcao == 1) {  // cadastrar cliente
                    if (numero_clientes < max_cli) {
                        printf("Digite o nome do cliente: ");
                        fgets(nome_clientes[numero_clientes], sizeof(nome_clientes[numero_clientes]), stdin);  // captura nome
                        fgets(nome_clientes[numero_clientes], sizeof(nome_clientes[numero_clientes]), stdin);  // corrige bug de leitura

                        // captura e valida o tel do cliente
                        int telefone_valido = 0;
                        while (!telefone_valido) {
                            printf("Digite o telefone do cliente (exemplo: 19999999999): ");
                            fgets(telefone_clientes[numero_clientes], sizeof(telefone_clientes[numero_clientes]), stdin);
                            telefone_clientes[numero_clientes][strcspn(telefone_clientes[numero_clientes], "\n")] = 0;

                            if (strlen(telefone_clientes[numero_clientes]) == 11 && strspn(telefone_clientes[numero_clientes], "0123456789") == 11) {
                                telefone_valido = 1;
                            } else {
                                printf("Formato de telefone inválido. Tente novamente.\n");
                            }
                        }
                        numero_clientes++;
                        printf("Cliente cadastrado com sucesso!\n");

                        // gravação dos dados do cliente no arquivo de cadastro
                        FILE *arquivo = fopen("cadastro_clientes.txt", "a");
                        if (arquivo != NULL) {
                            if (numero_clientes > 1) {
                                // insere uma linha vazia entre clientes diferentes
                                fprintf(arquivo, "\n");
                            }
                            fprintf(arquivo, "Cliente: %s\n", nome_clientes[numero_clientes - 1]);
                            fprintf(arquivo, "Telefone: (%c%c) %c %c%c%c%c-%c%c%c%c\n",
                                    telefone_clientes[numero_clientes - 1][0], telefone_clientes[numero_clientes - 1][1],
                                    telefone_clientes[numero_clientes - 1][2], telefone_clientes[numero_clientes - 1][3],
                                    telefone_clientes[numero_clientes - 1][4], telefone_clientes[numero_clientes - 1][5],
                                    telefone_clientes[numero_clientes - 1][6], telefone_clientes[numero_clientes - 1][7],
                                    telefone_clientes[numero_clientes - 1][8], telefone_clientes[numero_clientes - 1][9],
                                    telefone_clientes[numero_clientes - 1][10]);
                            fclose(arquivo);
                        } else {
                            printf("Erro ao abrir o arquivo de cadastro de clientes.\n");
                        }
                    } else {
                        printf("Limite de clientes atingido.\n");
                    }
                } else if (opcao == 2) {  // Iniciar a venda do carro para o cliente
                    int selecao_carro, parcelas;
                    float taxa, valor_total, saldo_devedor, entrada = 0;
                    char opcao_pagamento;
                    float valor_parcela;

                    // exibe os carros disponíveis
                    do {
                        printf("Escolha o carro:\n");
                        for (int i = 0; i < max_carros; i++) {
                            printf("%d. %s - R$%.2f\n", i + 1, carros[i], preco_carros[i]);
                        }

                        printf("Opção: ");
                        scanf("%d", &selecao_carro);
                    } while ((selecao_carro < 1) || (selecao_carro > 5));

                    // escolha da forma de pagamento
                    printf("Será à vista (v) ou parcelado (p)? ");
                    scanf(" %c", &opcao_pagamento);

                    if (opcao_pagamento == 'v' || opcao_pagamento == 'V') {  // pagamento a vista
                        valor_total = preco_carros[selecao_carro - 1];
                        printf("Valor total a pagar à vista: R$%.2f\n", valor_total);
                    } else if (opcao_pagamento == 'p' || opcao_pagamento == 'P') {  // pagamento parcelado
                        printf("As taxas de juros são as seguintes:\n");
                        printf("- Até 24 parcelas: 1.7%% ao mês\n");
                        printf("- Até 48 parcelas: 2.4%% ao mês\n");
                        printf("- Até 60 parcelas: 3.1%% ao mês\n");

                        // Cálculo da entrada como 20% do valor do carro
                        entrada = preco_carros[selecao_carro - 1] * 0.20;
                        printf("Valor da entrada (20%% do valor do carro): R$%.2f\n", entrada);

                        // impedir que o usuario digite um num de parcelas erradas
                        do {
                            printf("Informe o número de parcelas (Exemplo:12, 24, 36, 48, 60): ");
                            scanf("%d", &parcelas);
                            if (parcelas <= 0) {
                                printf("Parcelas negativas, favor informar uma parcela maior que 1.\n");
                            } else if (parcelas > 60) {
                                printf("Parcelas acima do esperado, digite novamente.\n");
                            }
                        } while (parcelas <= 0 || parcelas > 60);

                        // definição da taxa de juros com base no num de parcelas
                        if (parcelas <= 24) {
                            taxa = 1.7;
                        } else if (parcelas <= 48) {
                            taxa = 2.4;
                        } else if (parcelas <= 60) {
                            taxa = 3.1;
                        } else {
                            printf("Número de parcelas inválido!\n");
                            continue;
                        }

                        printf("Taxa de juros aplicada: %.1f%% ao mês\n", taxa);

                        // cálculo do saldo devedor com juros
                        saldo_devedor = preco_carros[selecao_carro - 1] - entrada;

                        for (int i = 0; i < parcelas; i++) {
                            saldo_devedor += saldo_devedor * (taxa / 100.0);
                        }

                        valor_total = saldo_devedor;
                        valor_parcela = valor_total / parcelas;

                        printf("Valor total a pagar parcelado(sem considerar o valor da entrada): R$%.2f\n", valor_total);
                        printf("Valor de cada parcela: R$%.2f\n", valor_parcela);
                    } else {
                        printf("Opção de pagamento inválida!\n");
                        continue;
                    }

                    // captura dos dados do cliente para finalizar a compra
                    char nome_cliente[50], telefone[20];
                    printf("Digite o nome do cliente: ");
                    fgets(nome_cliente, sizeof(nome_cliente), stdin);
                    fgets(nome_cliente, sizeof(nome_cliente), stdin);
                    int telefone_valido = 0;
                    while (!telefone_valido) {
                        printf("Digite o telefone do cliente (exemplo: 19999999999): ");
                        fgets(telefone, sizeof(telefone), stdin);
                        telefone[strcspn(telefone, "\n")] = 0;

                        if (strlen(telefone) == 11 && strspn(telefone, "0123456789") == 11) {
                            telefone_valido = 1;
                        } else {
                            printf("Formato de telefone inválido. Tente novamente.\n");
                        }
                    }

                    // resumo da compra
                    printf("\nResumo da Compra:\n");
                    printf("Cliente: %s", nome_cliente);
                    printf("Telefone: (%c%c) %c %c%c%c%c-%c%c%c%c\n", telefone[0], telefone[1], telefone[2], telefone[3], telefone[4], telefone[5], telefone[6], telefone[7], telefone[8], telefone[9], telefone[10]);
                    printf("Carro: %s\n", carros[selecao_carro - 1]);
                    if (opcao_pagamento == 'v' || opcao_pagamento == 'V') {
                        printf("Condição de Pagamento: À vista\n");
                    } else {
                        printf("Condição de Pagamento: Parcelado\n");
                        printf("Entrada: R$%.2f\n", entrada);
                        printf("Número de Parcelas: %d\n", parcelas);
                        printf("Valor de cada parcela: R$%.2f\n", valor_parcela);
                    }
                    printf("Valor Total: R$%.2f\n", valor_total);

                    // gravação dos dados da venda no arquivo de relatório
                    FILE *arquivo = fopen("relatorio_vendas.txt", "a");
                    if (arquivo != NULL) {
                        if (ftell(arquivo) > 0) {
                            // insere uma linha vazia entre registros de clientes diferentes
                            fprintf(arquivo, "\n");
                        }
                        fprintf(arquivo, "Cliente: %s", nome_cliente);
                        fprintf(arquivo, "Telefone: (%c%c) %c %c%c%c%c-%c%c%c%c\n", telefone[0], telefone[1], telefone[2], telefone[3], telefone[4], telefone[5], telefone[6], telefone[7], telefone[8], telefone[9], telefone[10]);
                        fprintf(arquivo, "Carro: %s\n", carros[selecao_carro - 1]);
                        if (opcao_pagamento == 'v' || opcao_pagamento == 'V') {
                            fprintf(arquivo, "Condição de Pagamento: À vista\n");
                        } else {
                            fprintf(arquivo, "Condição de Pagamento: Parcelado\n");
                            fprintf(arquivo, "Entrada: R$%.2f\n", entrada);
                            fprintf(arquivo, "Número de Parcelas: %d\n", parcelas);
                            fprintf(arquivo, "Valor de cada parcela: R$%.2f\n", valor_parcela);
                        }
                        fprintf(arquivo, "Valor Total: R$%.2f\n", valor_total);
                        fclose(arquivo);

                        printf("Nota fiscal emitida com sucesso! Parabéns pela compra!\n");
                    } else {
                        printf("Erro ao abrir o arquivo de relatório.\n");
                    }
                }
            } while (opcao != 3);  // continua no menu do funcionário até escolher sair(opção 4)
            continue;

        } else if (tipo_usuario == 1) {  // menu para o cliente
            int opcao;
            do {
                menu_cliente();  // exibe o menu do cliente
                printf("\nEscolha uma opção: ");
                scanf("%d", &opcao);

                if (opcao == 1) {  // ver carros disponíveis
                    for (int i = 0; i < max_carros; i++) {
                        printf("%d. %s - R$%.2f\n", i + 1, carros[i], preco_carros[i]);
                    }

                } if (opcao == 2) {  // Opções de financiamento
                    printf("As taxas de juros são as seguintes:\n");
                    printf("- Até 24 parcelas: 1.7%% ao mês\n");
                    printf("- Até 48 parcelas: 2.4%% ao mês\n");
                    printf("- Até 60 parcelas: 3.1%% ao mês\n");
                    }
                    printf("\nRetornando ao menu...\n");
                    if (opcao == 3) {
                    printf("Saindo do menu do cliente...\n");}
                    else if (opcao>=4){
                            printf("Opção inválida! Tente novamente.\n");}  // mensagem de erro para opção inválida

            } while (opcao != 3); //continua no menu até o cliente escolher sair (opção 3)
        }
    }
    return 0;
}
